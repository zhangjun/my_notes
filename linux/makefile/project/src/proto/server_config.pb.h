// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef PROTOBUF_server_5fconfig_2eproto__INCLUDED
#define PROTOBUF_server_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_server_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBackendImpl();
void InitDefaultsBackend();
void InitDefaultsHintBackendImpl();
void InitDefaultsHintBackend();
void InitDefaultsBlacklistBackendImpl();
void InitDefaultsBlacklistBackend();
void InitDefaultsServerConfigImpl();
void InitDefaultsServerConfig();
inline void InitDefaults() {
  InitDefaultsBackend();
  InitDefaultsHintBackend();
  InitDefaultsBlacklistBackend();
  InitDefaultsServerConfig();
}
}  // namespace protobuf_server_5fconfig_2eproto
namespace ss {
class Backend;
class BackendDefaultTypeInternal;
extern BackendDefaultTypeInternal _Backend_default_instance_;
class BlacklistBackend;
class BlacklistBackendDefaultTypeInternal;
extern BlacklistBackendDefaultTypeInternal _BlacklistBackend_default_instance_;
class HintBackend;
class HintBackendDefaultTypeInternal;
extern HintBackendDefaultTypeInternal _HintBackend_default_instance_;
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
}  // namespace ss
namespace ss {

// ===================================================================

class Backend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ss.Backend) */ {
 public:
  Backend();
  virtual ~Backend();

  Backend(const Backend& from);

  inline Backend& operator=(const Backend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Backend(Backend&& from) noexcept
    : Backend() {
    *this = ::std::move(from);
  }

  inline Backend& operator=(Backend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Backend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Backend* internal_default_instance() {
    return reinterpret_cast<const Backend*>(
               &_Backend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Backend* other);
  friend void swap(Backend& a, Backend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Backend* New() const PROTOBUF_FINAL { return New(NULL); }

  Backend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Backend& from);
  void MergeFrom(const Backend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Backend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string servers = 5;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 5;
  const ::std::string& servers(int index) const;
  ::std::string* mutable_servers(int index);
  void set_servers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_servers(int index, ::std::string&& value);
  #endif
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  ::std::string* add_servers();
  void add_servers(const ::std::string& value);
  #if LANG_CXX11
  void add_servers(::std::string&& value);
  #endif
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& servers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_servers();

  // string upstream_name = 2;
  void clear_upstream_name();
  static const int kUpstreamNameFieldNumber = 2;
  const ::std::string& upstream_name() const;
  void set_upstream_name(const ::std::string& value);
  #if LANG_CXX11
  void set_upstream_name(::std::string&& value);
  #endif
  void set_upstream_name(const char* value);
  void set_upstream_name(const char* value, size_t size);
  ::std::string* mutable_upstream_name();
  ::std::string* release_upstream_name();
  void set_allocated_upstream_name(::std::string* upstream_name);

  // int32 label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // int32 timeout = 3;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // int32 retry_max = 4;
  void clear_retry_max();
  static const int kRetryMaxFieldNumber = 4;
  ::google::protobuf::int32 retry_max() const;
  void set_retry_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ss.Backend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> servers_;
  ::google::protobuf::internal::ArenaStringPtr upstream_name_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 retry_max_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_server_5fconfig_2eproto::InitDefaultsBackendImpl();
};
// -------------------------------------------------------------------

class HintBackend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ss.HintBackend) */ {
 public:
  HintBackend();
  virtual ~HintBackend();

  HintBackend(const HintBackend& from);

  inline HintBackend& operator=(const HintBackend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HintBackend(HintBackend&& from) noexcept
    : HintBackend() {
    *this = ::std::move(from);
  }

  inline HintBackend& operator=(HintBackend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HintBackend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HintBackend* internal_default_instance() {
    return reinterpret_cast<const HintBackend*>(
               &_HintBackend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HintBackend* other);
  friend void swap(HintBackend& a, HintBackend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HintBackend* New() const PROTOBUF_FINAL { return New(NULL); }

  HintBackend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HintBackend& from);
  void MergeFrom(const HintBackend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HintBackend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string servers = 5;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 5;
  const ::std::string& servers(int index) const;
  ::std::string* mutable_servers(int index);
  void set_servers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_servers(int index, ::std::string&& value);
  #endif
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  ::std::string* add_servers();
  void add_servers(const ::std::string& value);
  #if LANG_CXX11
  void add_servers(::std::string&& value);
  #endif
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& servers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_servers();

  // string upstream_name = 2;
  void clear_upstream_name();
  static const int kUpstreamNameFieldNumber = 2;
  const ::std::string& upstream_name() const;
  void set_upstream_name(const ::std::string& value);
  #if LANG_CXX11
  void set_upstream_name(::std::string&& value);
  #endif
  void set_upstream_name(const char* value);
  void set_upstream_name(const char* value, size_t size);
  ::std::string* mutable_upstream_name();
  ::std::string* release_upstream_name();
  void set_allocated_upstream_name(::std::string* upstream_name);

  // int32 label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // int32 timeout = 3;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // int32 retry_max = 4;
  void clear_retry_max();
  static const int kRetryMaxFieldNumber = 4;
  ::google::protobuf::int32 retry_max() const;
  void set_retry_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ss.HintBackend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> servers_;
  ::google::protobuf::internal::ArenaStringPtr upstream_name_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 retry_max_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_server_5fconfig_2eproto::InitDefaultsHintBackendImpl();
};
// -------------------------------------------------------------------

class BlacklistBackend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ss.BlacklistBackend) */ {
 public:
  BlacklistBackend();
  virtual ~BlacklistBackend();

  BlacklistBackend(const BlacklistBackend& from);

  inline BlacklistBackend& operator=(const BlacklistBackend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlacklistBackend(BlacklistBackend&& from) noexcept
    : BlacklistBackend() {
    *this = ::std::move(from);
  }

  inline BlacklistBackend& operator=(BlacklistBackend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlacklistBackend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlacklistBackend* internal_default_instance() {
    return reinterpret_cast<const BlacklistBackend*>(
               &_BlacklistBackend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BlacklistBackend* other);
  friend void swap(BlacklistBackend& a, BlacklistBackend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlacklistBackend* New() const PROTOBUF_FINAL { return New(NULL); }

  BlacklistBackend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlacklistBackend& from);
  void MergeFrom(const BlacklistBackend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlacklistBackend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string servers = 5;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 5;
  const ::std::string& servers(int index) const;
  ::std::string* mutable_servers(int index);
  void set_servers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_servers(int index, ::std::string&& value);
  #endif
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  ::std::string* add_servers();
  void add_servers(const ::std::string& value);
  #if LANG_CXX11
  void add_servers(::std::string&& value);
  #endif
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& servers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_servers();

  // string upstream_name = 2;
  void clear_upstream_name();
  static const int kUpstreamNameFieldNumber = 2;
  const ::std::string& upstream_name() const;
  void set_upstream_name(const ::std::string& value);
  #if LANG_CXX11
  void set_upstream_name(::std::string&& value);
  #endif
  void set_upstream_name(const char* value);
  void set_upstream_name(const char* value, size_t size);
  ::std::string* mutable_upstream_name();
  ::std::string* release_upstream_name();
  void set_allocated_upstream_name(::std::string* upstream_name);

  // int32 label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // int32 redirect_max = 3;
  void clear_redirect_max();
  static const int kRedirectMaxFieldNumber = 3;
  ::google::protobuf::int32 redirect_max() const;
  void set_redirect_max(::google::protobuf::int32 value);

  // int32 retry_max = 4;
  void clear_retry_max();
  static const int kRetryMaxFieldNumber = 4;
  ::google::protobuf::int32 retry_max() const;
  void set_retry_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ss.BlacklistBackend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> servers_;
  ::google::protobuf::internal::ArenaStringPtr upstream_name_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::int32 redirect_max_;
  ::google::protobuf::int32 retry_max_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_server_5fconfig_2eproto::InitDefaultsBlacklistBackendImpl();
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ss.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ServerConfig* other);
  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ss.Backend cache = 3;
  bool has_cache() const;
  void clear_cache();
  static const int kCacheFieldNumber = 3;
  const ::ss::Backend& cache() const;
  ::ss::Backend* release_cache();
  ::ss::Backend* mutable_cache();
  void set_allocated_cache(::ss::Backend* cache);

  // .ss.HintBackend hint = 4;
  bool has_hint() const;
  void clear_hint();
  static const int kHintFieldNumber = 4;
  const ::ss::HintBackend& hint() const;
  ::ss::HintBackend* release_hint();
  ::ss::HintBackend* mutable_hint();
  void set_allocated_hint(::ss::HintBackend* hint);

  // .ss.BlacklistBackend blacklist = 5;
  bool has_blacklist() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 5;
  const ::ss::BlacklistBackend& blacklist() const;
  ::ss::BlacklistBackend* release_blacklist();
  ::ss::BlacklistBackend* mutable_blacklist();
  void set_allocated_blacklist(::ss::BlacklistBackend* blacklist);

  // int32 port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 thread_num = 2;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 2;
  ::google::protobuf::int32 thread_num() const;
  void set_thread_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ss.ServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ss::Backend* cache_;
  ::ss::HintBackend* hint_;
  ::ss::BlacklistBackend* blacklist_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 thread_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_server_5fconfig_2eproto::InitDefaultsServerConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Backend

// int32 label = 1;
inline void Backend::clear_label() {
  label_ = 0;
}
inline ::google::protobuf::int32 Backend::label() const {
  // @@protoc_insertion_point(field_get:ss.Backend.label)
  return label_;
}
inline void Backend::set_label(::google::protobuf::int32 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:ss.Backend.label)
}

// string upstream_name = 2;
inline void Backend::clear_upstream_name() {
  upstream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Backend::upstream_name() const {
  // @@protoc_insertion_point(field_get:ss.Backend.upstream_name)
  return upstream_name_.GetNoArena();
}
inline void Backend::set_upstream_name(const ::std::string& value) {
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ss.Backend.upstream_name)
}
#if LANG_CXX11
inline void Backend::set_upstream_name(::std::string&& value) {
  
  upstream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ss.Backend.upstream_name)
}
#endif
inline void Backend::set_upstream_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ss.Backend.upstream_name)
}
inline void Backend::set_upstream_name(const char* value, size_t size) {
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ss.Backend.upstream_name)
}
inline ::std::string* Backend::mutable_upstream_name() {
  
  // @@protoc_insertion_point(field_mutable:ss.Backend.upstream_name)
  return upstream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Backend::release_upstream_name() {
  // @@protoc_insertion_point(field_release:ss.Backend.upstream_name)
  
  return upstream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Backend::set_allocated_upstream_name(::std::string* upstream_name) {
  if (upstream_name != NULL) {
    
  } else {
    
  }
  upstream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upstream_name);
  // @@protoc_insertion_point(field_set_allocated:ss.Backend.upstream_name)
}

// int32 timeout = 3;
inline void Backend::clear_timeout() {
  timeout_ = 0;
}
inline ::google::protobuf::int32 Backend::timeout() const {
  // @@protoc_insertion_point(field_get:ss.Backend.timeout)
  return timeout_;
}
inline void Backend::set_timeout(::google::protobuf::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ss.Backend.timeout)
}

// int32 retry_max = 4;
inline void Backend::clear_retry_max() {
  retry_max_ = 0;
}
inline ::google::protobuf::int32 Backend::retry_max() const {
  // @@protoc_insertion_point(field_get:ss.Backend.retry_max)
  return retry_max_;
}
inline void Backend::set_retry_max(::google::protobuf::int32 value) {
  
  retry_max_ = value;
  // @@protoc_insertion_point(field_set:ss.Backend.retry_max)
}

// repeated string servers = 5;
inline int Backend::servers_size() const {
  return servers_.size();
}
inline void Backend::clear_servers() {
  servers_.Clear();
}
inline const ::std::string& Backend::servers(int index) const {
  // @@protoc_insertion_point(field_get:ss.Backend.servers)
  return servers_.Get(index);
}
inline ::std::string* Backend::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:ss.Backend.servers)
  return servers_.Mutable(index);
}
inline void Backend::set_servers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ss.Backend.servers)
  servers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Backend::set_servers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ss.Backend.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Backend::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ss.Backend.servers)
}
inline void Backend::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ss.Backend.servers)
}
inline ::std::string* Backend::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:ss.Backend.servers)
  return servers_.Add();
}
inline void Backend::add_servers(const ::std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ss.Backend.servers)
}
#if LANG_CXX11
inline void Backend::add_servers(::std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ss.Backend.servers)
}
#endif
inline void Backend::add_servers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ss.Backend.servers)
}
inline void Backend::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ss.Backend.servers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Backend::servers() const {
  // @@protoc_insertion_point(field_list:ss.Backend.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Backend::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:ss.Backend.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// HintBackend

// int32 label = 1;
inline void HintBackend::clear_label() {
  label_ = 0;
}
inline ::google::protobuf::int32 HintBackend::label() const {
  // @@protoc_insertion_point(field_get:ss.HintBackend.label)
  return label_;
}
inline void HintBackend::set_label(::google::protobuf::int32 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:ss.HintBackend.label)
}

// string upstream_name = 2;
inline void HintBackend::clear_upstream_name() {
  upstream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HintBackend::upstream_name() const {
  // @@protoc_insertion_point(field_get:ss.HintBackend.upstream_name)
  return upstream_name_.GetNoArena();
}
inline void HintBackend::set_upstream_name(const ::std::string& value) {
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ss.HintBackend.upstream_name)
}
#if LANG_CXX11
inline void HintBackend::set_upstream_name(::std::string&& value) {
  
  upstream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ss.HintBackend.upstream_name)
}
#endif
inline void HintBackend::set_upstream_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ss.HintBackend.upstream_name)
}
inline void HintBackend::set_upstream_name(const char* value, size_t size) {
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ss.HintBackend.upstream_name)
}
inline ::std::string* HintBackend::mutable_upstream_name() {
  
  // @@protoc_insertion_point(field_mutable:ss.HintBackend.upstream_name)
  return upstream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HintBackend::release_upstream_name() {
  // @@protoc_insertion_point(field_release:ss.HintBackend.upstream_name)
  
  return upstream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HintBackend::set_allocated_upstream_name(::std::string* upstream_name) {
  if (upstream_name != NULL) {
    
  } else {
    
  }
  upstream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upstream_name);
  // @@protoc_insertion_point(field_set_allocated:ss.HintBackend.upstream_name)
}

// int32 timeout = 3;
inline void HintBackend::clear_timeout() {
  timeout_ = 0;
}
inline ::google::protobuf::int32 HintBackend::timeout() const {
  // @@protoc_insertion_point(field_get:ss.HintBackend.timeout)
  return timeout_;
}
inline void HintBackend::set_timeout(::google::protobuf::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ss.HintBackend.timeout)
}

// int32 retry_max = 4;
inline void HintBackend::clear_retry_max() {
  retry_max_ = 0;
}
inline ::google::protobuf::int32 HintBackend::retry_max() const {
  // @@protoc_insertion_point(field_get:ss.HintBackend.retry_max)
  return retry_max_;
}
inline void HintBackend::set_retry_max(::google::protobuf::int32 value) {
  
  retry_max_ = value;
  // @@protoc_insertion_point(field_set:ss.HintBackend.retry_max)
}

// repeated string servers = 5;
inline int HintBackend::servers_size() const {
  return servers_.size();
}
inline void HintBackend::clear_servers() {
  servers_.Clear();
}
inline const ::std::string& HintBackend::servers(int index) const {
  // @@protoc_insertion_point(field_get:ss.HintBackend.servers)
  return servers_.Get(index);
}
inline ::std::string* HintBackend::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:ss.HintBackend.servers)
  return servers_.Mutable(index);
}
inline void HintBackend::set_servers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ss.HintBackend.servers)
  servers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HintBackend::set_servers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ss.HintBackend.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HintBackend::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ss.HintBackend.servers)
}
inline void HintBackend::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ss.HintBackend.servers)
}
inline ::std::string* HintBackend::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:ss.HintBackend.servers)
  return servers_.Add();
}
inline void HintBackend::add_servers(const ::std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ss.HintBackend.servers)
}
#if LANG_CXX11
inline void HintBackend::add_servers(::std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ss.HintBackend.servers)
}
#endif
inline void HintBackend::add_servers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ss.HintBackend.servers)
}
inline void HintBackend::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ss.HintBackend.servers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HintBackend::servers() const {
  // @@protoc_insertion_point(field_list:ss.HintBackend.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HintBackend::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:ss.HintBackend.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// BlacklistBackend

// int32 label = 1;
inline void BlacklistBackend::clear_label() {
  label_ = 0;
}
inline ::google::protobuf::int32 BlacklistBackend::label() const {
  // @@protoc_insertion_point(field_get:ss.BlacklistBackend.label)
  return label_;
}
inline void BlacklistBackend::set_label(::google::protobuf::int32 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:ss.BlacklistBackend.label)
}

// string upstream_name = 2;
inline void BlacklistBackend::clear_upstream_name() {
  upstream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlacklistBackend::upstream_name() const {
  // @@protoc_insertion_point(field_get:ss.BlacklistBackend.upstream_name)
  return upstream_name_.GetNoArena();
}
inline void BlacklistBackend::set_upstream_name(const ::std::string& value) {
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ss.BlacklistBackend.upstream_name)
}
#if LANG_CXX11
inline void BlacklistBackend::set_upstream_name(::std::string&& value) {
  
  upstream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ss.BlacklistBackend.upstream_name)
}
#endif
inline void BlacklistBackend::set_upstream_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ss.BlacklistBackend.upstream_name)
}
inline void BlacklistBackend::set_upstream_name(const char* value, size_t size) {
  
  upstream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ss.BlacklistBackend.upstream_name)
}
inline ::std::string* BlacklistBackend::mutable_upstream_name() {
  
  // @@protoc_insertion_point(field_mutable:ss.BlacklistBackend.upstream_name)
  return upstream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlacklistBackend::release_upstream_name() {
  // @@protoc_insertion_point(field_release:ss.BlacklistBackend.upstream_name)
  
  return upstream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlacklistBackend::set_allocated_upstream_name(::std::string* upstream_name) {
  if (upstream_name != NULL) {
    
  } else {
    
  }
  upstream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upstream_name);
  // @@protoc_insertion_point(field_set_allocated:ss.BlacklistBackend.upstream_name)
}

// int32 redirect_max = 3;
inline void BlacklistBackend::clear_redirect_max() {
  redirect_max_ = 0;
}
inline ::google::protobuf::int32 BlacklistBackend::redirect_max() const {
  // @@protoc_insertion_point(field_get:ss.BlacklistBackend.redirect_max)
  return redirect_max_;
}
inline void BlacklistBackend::set_redirect_max(::google::protobuf::int32 value) {
  
  redirect_max_ = value;
  // @@protoc_insertion_point(field_set:ss.BlacklistBackend.redirect_max)
}

// int32 retry_max = 4;
inline void BlacklistBackend::clear_retry_max() {
  retry_max_ = 0;
}
inline ::google::protobuf::int32 BlacklistBackend::retry_max() const {
  // @@protoc_insertion_point(field_get:ss.BlacklistBackend.retry_max)
  return retry_max_;
}
inline void BlacklistBackend::set_retry_max(::google::protobuf::int32 value) {
  
  retry_max_ = value;
  // @@protoc_insertion_point(field_set:ss.BlacklistBackend.retry_max)
}

// repeated string servers = 5;
inline int BlacklistBackend::servers_size() const {
  return servers_.size();
}
inline void BlacklistBackend::clear_servers() {
  servers_.Clear();
}
inline const ::std::string& BlacklistBackend::servers(int index) const {
  // @@protoc_insertion_point(field_get:ss.BlacklistBackend.servers)
  return servers_.Get(index);
}
inline ::std::string* BlacklistBackend::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:ss.BlacklistBackend.servers)
  return servers_.Mutable(index);
}
inline void BlacklistBackend::set_servers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ss.BlacklistBackend.servers)
  servers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BlacklistBackend::set_servers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ss.BlacklistBackend.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BlacklistBackend::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ss.BlacklistBackend.servers)
}
inline void BlacklistBackend::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ss.BlacklistBackend.servers)
}
inline ::std::string* BlacklistBackend::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:ss.BlacklistBackend.servers)
  return servers_.Add();
}
inline void BlacklistBackend::add_servers(const ::std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ss.BlacklistBackend.servers)
}
#if LANG_CXX11
inline void BlacklistBackend::add_servers(::std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ss.BlacklistBackend.servers)
}
#endif
inline void BlacklistBackend::add_servers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ss.BlacklistBackend.servers)
}
inline void BlacklistBackend::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ss.BlacklistBackend.servers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlacklistBackend::servers() const {
  // @@protoc_insertion_point(field_list:ss.BlacklistBackend.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlacklistBackend::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:ss.BlacklistBackend.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// ServerConfig

// int32 port = 1;
inline void ServerConfig::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ServerConfig::port() const {
  // @@protoc_insertion_point(field_get:ss.ServerConfig.port)
  return port_;
}
inline void ServerConfig::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ss.ServerConfig.port)
}

// int32 thread_num = 2;
inline void ServerConfig::clear_thread_num() {
  thread_num_ = 0;
}
inline ::google::protobuf::int32 ServerConfig::thread_num() const {
  // @@protoc_insertion_point(field_get:ss.ServerConfig.thread_num)
  return thread_num_;
}
inline void ServerConfig::set_thread_num(::google::protobuf::int32 value) {
  
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:ss.ServerConfig.thread_num)
}

// .ss.Backend cache = 3;
inline bool ServerConfig::has_cache() const {
  return this != internal_default_instance() && cache_ != NULL;
}
inline void ServerConfig::clear_cache() {
  if (GetArenaNoVirtual() == NULL && cache_ != NULL) {
    delete cache_;
  }
  cache_ = NULL;
}
inline const ::ss::Backend& ServerConfig::cache() const {
  const ::ss::Backend* p = cache_;
  // @@protoc_insertion_point(field_get:ss.ServerConfig.cache)
  return p != NULL ? *p : *reinterpret_cast<const ::ss::Backend*>(
      &::ss::_Backend_default_instance_);
}
inline ::ss::Backend* ServerConfig::release_cache() {
  // @@protoc_insertion_point(field_release:ss.ServerConfig.cache)
  
  ::ss::Backend* temp = cache_;
  cache_ = NULL;
  return temp;
}
inline ::ss::Backend* ServerConfig::mutable_cache() {
  
  if (cache_ == NULL) {
    cache_ = new ::ss::Backend;
  }
  // @@protoc_insertion_point(field_mutable:ss.ServerConfig.cache)
  return cache_;
}
inline void ServerConfig::set_allocated_cache(::ss::Backend* cache) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cache_;
  }
  if (cache) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cache = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cache, submessage_arena);
    }
    
  } else {
    
  }
  cache_ = cache;
  // @@protoc_insertion_point(field_set_allocated:ss.ServerConfig.cache)
}

// .ss.HintBackend hint = 4;
inline bool ServerConfig::has_hint() const {
  return this != internal_default_instance() && hint_ != NULL;
}
inline void ServerConfig::clear_hint() {
  if (GetArenaNoVirtual() == NULL && hint_ != NULL) {
    delete hint_;
  }
  hint_ = NULL;
}
inline const ::ss::HintBackend& ServerConfig::hint() const {
  const ::ss::HintBackend* p = hint_;
  // @@protoc_insertion_point(field_get:ss.ServerConfig.hint)
  return p != NULL ? *p : *reinterpret_cast<const ::ss::HintBackend*>(
      &::ss::_HintBackend_default_instance_);
}
inline ::ss::HintBackend* ServerConfig::release_hint() {
  // @@protoc_insertion_point(field_release:ss.ServerConfig.hint)
  
  ::ss::HintBackend* temp = hint_;
  hint_ = NULL;
  return temp;
}
inline ::ss::HintBackend* ServerConfig::mutable_hint() {
  
  if (hint_ == NULL) {
    hint_ = new ::ss::HintBackend;
  }
  // @@protoc_insertion_point(field_mutable:ss.ServerConfig.hint)
  return hint_;
}
inline void ServerConfig::set_allocated_hint(::ss::HintBackend* hint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hint_;
  }
  if (hint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    
  } else {
    
  }
  hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:ss.ServerConfig.hint)
}

// .ss.BlacklistBackend blacklist = 5;
inline bool ServerConfig::has_blacklist() const {
  return this != internal_default_instance() && blacklist_ != NULL;
}
inline void ServerConfig::clear_blacklist() {
  if (GetArenaNoVirtual() == NULL && blacklist_ != NULL) {
    delete blacklist_;
  }
  blacklist_ = NULL;
}
inline const ::ss::BlacklistBackend& ServerConfig::blacklist() const {
  const ::ss::BlacklistBackend* p = blacklist_;
  // @@protoc_insertion_point(field_get:ss.ServerConfig.blacklist)
  return p != NULL ? *p : *reinterpret_cast<const ::ss::BlacklistBackend*>(
      &::ss::_BlacklistBackend_default_instance_);
}
inline ::ss::BlacklistBackend* ServerConfig::release_blacklist() {
  // @@protoc_insertion_point(field_release:ss.ServerConfig.blacklist)
  
  ::ss::BlacklistBackend* temp = blacklist_;
  blacklist_ = NULL;
  return temp;
}
inline ::ss::BlacklistBackend* ServerConfig::mutable_blacklist() {
  
  if (blacklist_ == NULL) {
    blacklist_ = new ::ss::BlacklistBackend;
  }
  // @@protoc_insertion_point(field_mutable:ss.ServerConfig.blacklist)
  return blacklist_;
}
inline void ServerConfig::set_allocated_blacklist(::ss::BlacklistBackend* blacklist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blacklist_;
  }
  if (blacklist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blacklist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blacklist, submessage_arena);
    }
    
  } else {
    
  }
  blacklist_ = blacklist;
  // @@protoc_insertion_point(field_set_allocated:ss.ServerConfig.blacklist)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ss

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fconfig_2eproto__INCLUDED
