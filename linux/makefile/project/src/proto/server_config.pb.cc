// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#include "server_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace ss {
class BackendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Backend>
      _instance;
} _Backend_default_instance_;
class HintBackendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HintBackend>
      _instance;
} _HintBackend_default_instance_;
class BlacklistBackendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlacklistBackend>
      _instance;
} _BlacklistBackend_default_instance_;
class ServerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerConfig>
      _instance;
} _ServerConfig_default_instance_;
}  // namespace ss
namespace protobuf_server_5fconfig_2eproto {
void InitDefaultsBackendImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ss::_Backend_default_instance_;
    new (ptr) ::ss::Backend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss::Backend::InitAsDefaultInstance();
}

void InitDefaultsBackend() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBackendImpl);
}

void InitDefaultsHintBackendImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ss::_HintBackend_default_instance_;
    new (ptr) ::ss::HintBackend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss::HintBackend::InitAsDefaultInstance();
}

void InitDefaultsHintBackend() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHintBackendImpl);
}

void InitDefaultsBlacklistBackendImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ss::_BlacklistBackend_default_instance_;
    new (ptr) ::ss::BlacklistBackend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss::BlacklistBackend::InitAsDefaultInstance();
}

void InitDefaultsBlacklistBackend() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlacklistBackendImpl);
}

void InitDefaultsServerConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_server_5fconfig_2eproto::InitDefaultsBackend();
  protobuf_server_5fconfig_2eproto::InitDefaultsHintBackend();
  protobuf_server_5fconfig_2eproto::InitDefaultsBlacklistBackend();
  {
    void* ptr = &::ss::_ServerConfig_default_instance_;
    new (ptr) ::ss::ServerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss::ServerConfig::InitAsDefaultInstance();
}

void InitDefaultsServerConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::Backend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::Backend, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::Backend, upstream_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::Backend, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::Backend, retry_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::Backend, servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::HintBackend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::HintBackend, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::HintBackend, upstream_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::HintBackend, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::HintBackend, retry_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::HintBackend, servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::BlacklistBackend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::BlacklistBackend, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::BlacklistBackend, upstream_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::BlacklistBackend, redirect_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::BlacklistBackend, retry_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::BlacklistBackend, servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::ServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::ServerConfig, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::ServerConfig, thread_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::ServerConfig, cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::ServerConfig, hint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ss::ServerConfig, blacklist_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ss::Backend)},
  { 10, -1, sizeof(::ss::HintBackend)},
  { 20, -1, sizeof(::ss::BlacklistBackend)},
  { 30, -1, sizeof(::ss::ServerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ss::_Backend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ss::_HintBackend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ss::_BlacklistBackend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ss::_ServerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "server_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023server_config.proto\022\002ss\"d\n\007Backend\022\r\n\005"
      "label\030\001 \001(\005\022\025\n\rupstream_name\030\002 \001(\t\022\017\n\007ti"
      "meout\030\003 \001(\005\022\021\n\tretry_max\030\004 \001(\005\022\017\n\007server"
      "s\030\005 \003(\t\"h\n\013HintBackend\022\r\n\005label\030\001 \001(\005\022\025\n"
      "\rupstream_name\030\002 \001(\t\022\017\n\007timeout\030\003 \001(\005\022\021\n"
      "\tretry_max\030\004 \001(\005\022\017\n\007servers\030\005 \003(\t\"r\n\020Bla"
      "cklistBackend\022\r\n\005label\030\001 \001(\005\022\025\n\rupstream"
      "_name\030\002 \001(\t\022\024\n\014redirect_max\030\003 \001(\005\022\021\n\tret"
      "ry_max\030\004 \001(\005\022\017\n\007servers\030\005 \003(\t\"\224\001\n\014Server"
      "Config\022\014\n\004port\030\001 \001(\005\022\022\n\nthread_num\030\002 \001(\005"
      "\022\032\n\005cache\030\003 \001(\0132\013.ss.Backend\022\035\n\004hint\030\004 \001"
      "(\0132\017.ss.HintBackend\022\'\n\tblacklist\030\005 \001(\0132\024"
      ".ss.BlacklistBackendb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_server_5fconfig_2eproto
namespace ss {

// ===================================================================

void Backend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Backend::kLabelFieldNumber;
const int Backend::kUpstreamNameFieldNumber;
const int Backend::kTimeoutFieldNumber;
const int Backend::kRetryMaxFieldNumber;
const int Backend::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Backend::Backend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_server_5fconfig_2eproto::InitDefaultsBackend();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ss.Backend)
}
Backend::Backend(const Backend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servers_(from.servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upstream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upstream_name().size() > 0) {
    upstream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_name_);
  }
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_max_) -
    reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  // @@protoc_insertion_point(copy_constructor:ss.Backend)
}

void Backend::SharedCtor() {
  upstream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_max_) -
      reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  _cached_size_ = 0;
}

Backend::~Backend() {
  // @@protoc_insertion_point(destructor:ss.Backend)
  SharedDtor();
}

void Backend::SharedDtor() {
  upstream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Backend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Backend::descriptor() {
  ::protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Backend& Backend::default_instance() {
  ::protobuf_server_5fconfig_2eproto::InitDefaultsBackend();
  return *internal_default_instance();
}

Backend* Backend::New(::google::protobuf::Arena* arena) const {
  Backend* n = new Backend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Backend::Clear() {
// @@protoc_insertion_point(message_clear_start:ss.Backend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  upstream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_max_) -
      reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  _internal_metadata_.Clear();
}

bool Backend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ss.Backend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upstream_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upstream_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ss.Backend.upstream_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retry_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string servers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servers(this->servers_size() - 1).data(),
            static_cast<int>(this->servers(this->servers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ss.Backend.servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ss.Backend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ss.Backend)
  return false;
#undef DO_
}

void Backend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ss.Backend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 label = 1;
  if (this->label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label(), output);
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.Backend.upstream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->upstream_name(), output);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout(), output);
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retry_max(), output);
  }

  // repeated string servers = 5;
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servers(i).data(), static_cast<int>(this->servers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.Backend.servers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servers(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ss.Backend)
}

::google::protobuf::uint8* Backend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ss.Backend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 label = 1;
  if (this->label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label(), target);
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.Backend.upstream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->upstream_name(), target);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout(), target);
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retry_max(), target);
  }

  // repeated string servers = 5;
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servers(i).data(), static_cast<int>(this->servers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.Backend.servers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->servers(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss.Backend)
  return target;
}

size_t Backend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss.Backend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string servers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->servers_size());
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->servers(i));
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upstream_name());
  }

  // int32 label = 1;
  if (this->label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->label());
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeout());
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retry_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Backend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss.Backend)
  GOOGLE_DCHECK_NE(&from, this);
  const Backend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Backend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss.Backend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss.Backend)
    MergeFrom(*source);
  }
}

void Backend::MergeFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss.Backend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.upstream_name().size() > 0) {

    upstream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_name_);
  }
  if (from.label() != 0) {
    set_label(from.label());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.retry_max() != 0) {
    set_retry_max(from.retry_max());
  }
}

void Backend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss.Backend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backend::CopyFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss.Backend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backend::IsInitialized() const {
  return true;
}

void Backend::Swap(Backend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Backend::InternalSwap(Backend* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  upstream_name_.Swap(&other->upstream_name_);
  swap(label_, other->label_);
  swap(timeout_, other->timeout_);
  swap(retry_max_, other->retry_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Backend::GetMetadata() const {
  protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HintBackend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HintBackend::kLabelFieldNumber;
const int HintBackend::kUpstreamNameFieldNumber;
const int HintBackend::kTimeoutFieldNumber;
const int HintBackend::kRetryMaxFieldNumber;
const int HintBackend::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HintBackend::HintBackend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_server_5fconfig_2eproto::InitDefaultsHintBackend();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ss.HintBackend)
}
HintBackend::HintBackend(const HintBackend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servers_(from.servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upstream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upstream_name().size() > 0) {
    upstream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_name_);
  }
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_max_) -
    reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  // @@protoc_insertion_point(copy_constructor:ss.HintBackend)
}

void HintBackend::SharedCtor() {
  upstream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_max_) -
      reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  _cached_size_ = 0;
}

HintBackend::~HintBackend() {
  // @@protoc_insertion_point(destructor:ss.HintBackend)
  SharedDtor();
}

void HintBackend::SharedDtor() {
  upstream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HintBackend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HintBackend::descriptor() {
  ::protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HintBackend& HintBackend::default_instance() {
  ::protobuf_server_5fconfig_2eproto::InitDefaultsHintBackend();
  return *internal_default_instance();
}

HintBackend* HintBackend::New(::google::protobuf::Arena* arena) const {
  HintBackend* n = new HintBackend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HintBackend::Clear() {
// @@protoc_insertion_point(message_clear_start:ss.HintBackend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  upstream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_max_) -
      reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  _internal_metadata_.Clear();
}

bool HintBackend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ss.HintBackend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upstream_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upstream_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ss.HintBackend.upstream_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retry_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string servers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servers(this->servers_size() - 1).data(),
            static_cast<int>(this->servers(this->servers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ss.HintBackend.servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ss.HintBackend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ss.HintBackend)
  return false;
#undef DO_
}

void HintBackend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ss.HintBackend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 label = 1;
  if (this->label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label(), output);
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.HintBackend.upstream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->upstream_name(), output);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout(), output);
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retry_max(), output);
  }

  // repeated string servers = 5;
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servers(i).data(), static_cast<int>(this->servers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.HintBackend.servers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servers(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ss.HintBackend)
}

::google::protobuf::uint8* HintBackend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ss.HintBackend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 label = 1;
  if (this->label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label(), target);
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.HintBackend.upstream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->upstream_name(), target);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout(), target);
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retry_max(), target);
  }

  // repeated string servers = 5;
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servers(i).data(), static_cast<int>(this->servers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.HintBackend.servers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->servers(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss.HintBackend)
  return target;
}

size_t HintBackend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss.HintBackend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string servers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->servers_size());
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->servers(i));
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upstream_name());
  }

  // int32 label = 1;
  if (this->label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->label());
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeout());
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retry_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HintBackend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss.HintBackend)
  GOOGLE_DCHECK_NE(&from, this);
  const HintBackend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HintBackend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss.HintBackend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss.HintBackend)
    MergeFrom(*source);
  }
}

void HintBackend::MergeFrom(const HintBackend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss.HintBackend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.upstream_name().size() > 0) {

    upstream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_name_);
  }
  if (from.label() != 0) {
    set_label(from.label());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.retry_max() != 0) {
    set_retry_max(from.retry_max());
  }
}

void HintBackend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss.HintBackend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HintBackend::CopyFrom(const HintBackend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss.HintBackend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HintBackend::IsInitialized() const {
  return true;
}

void HintBackend::Swap(HintBackend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HintBackend::InternalSwap(HintBackend* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  upstream_name_.Swap(&other->upstream_name_);
  swap(label_, other->label_);
  swap(timeout_, other->timeout_);
  swap(retry_max_, other->retry_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HintBackend::GetMetadata() const {
  protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlacklistBackend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlacklistBackend::kLabelFieldNumber;
const int BlacklistBackend::kUpstreamNameFieldNumber;
const int BlacklistBackend::kRedirectMaxFieldNumber;
const int BlacklistBackend::kRetryMaxFieldNumber;
const int BlacklistBackend::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlacklistBackend::BlacklistBackend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_server_5fconfig_2eproto::InitDefaultsBlacklistBackend();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ss.BlacklistBackend)
}
BlacklistBackend::BlacklistBackend(const BlacklistBackend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servers_(from.servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upstream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upstream_name().size() > 0) {
    upstream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_name_);
  }
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_max_) -
    reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  // @@protoc_insertion_point(copy_constructor:ss.BlacklistBackend)
}

void BlacklistBackend::SharedCtor() {
  upstream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_max_) -
      reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  _cached_size_ = 0;
}

BlacklistBackend::~BlacklistBackend() {
  // @@protoc_insertion_point(destructor:ss.BlacklistBackend)
  SharedDtor();
}

void BlacklistBackend::SharedDtor() {
  upstream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlacklistBackend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlacklistBackend::descriptor() {
  ::protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlacklistBackend& BlacklistBackend::default_instance() {
  ::protobuf_server_5fconfig_2eproto::InitDefaultsBlacklistBackend();
  return *internal_default_instance();
}

BlacklistBackend* BlacklistBackend::New(::google::protobuf::Arena* arena) const {
  BlacklistBackend* n = new BlacklistBackend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlacklistBackend::Clear() {
// @@protoc_insertion_point(message_clear_start:ss.BlacklistBackend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  upstream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_max_) -
      reinterpret_cast<char*>(&label_)) + sizeof(retry_max_));
  _internal_metadata_.Clear();
}

bool BlacklistBackend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ss.BlacklistBackend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upstream_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upstream_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ss.BlacklistBackend.upstream_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 redirect_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redirect_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retry_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string servers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servers(this->servers_size() - 1).data(),
            static_cast<int>(this->servers(this->servers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ss.BlacklistBackend.servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ss.BlacklistBackend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ss.BlacklistBackend)
  return false;
#undef DO_
}

void BlacklistBackend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ss.BlacklistBackend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 label = 1;
  if (this->label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label(), output);
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.BlacklistBackend.upstream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->upstream_name(), output);
  }

  // int32 redirect_max = 3;
  if (this->redirect_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->redirect_max(), output);
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retry_max(), output);
  }

  // repeated string servers = 5;
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servers(i).data(), static_cast<int>(this->servers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.BlacklistBackend.servers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servers(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ss.BlacklistBackend)
}

::google::protobuf::uint8* BlacklistBackend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ss.BlacklistBackend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 label = 1;
  if (this->label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label(), target);
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_name().data(), static_cast<int>(this->upstream_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.BlacklistBackend.upstream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->upstream_name(), target);
  }

  // int32 redirect_max = 3;
  if (this->redirect_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->redirect_max(), target);
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retry_max(), target);
  }

  // repeated string servers = 5;
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servers(i).data(), static_cast<int>(this->servers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ss.BlacklistBackend.servers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->servers(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss.BlacklistBackend)
  return target;
}

size_t BlacklistBackend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss.BlacklistBackend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string servers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->servers_size());
  for (int i = 0, n = this->servers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->servers(i));
  }

  // string upstream_name = 2;
  if (this->upstream_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upstream_name());
  }

  // int32 label = 1;
  if (this->label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->label());
  }

  // int32 redirect_max = 3;
  if (this->redirect_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redirect_max());
  }

  // int32 retry_max = 4;
  if (this->retry_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retry_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlacklistBackend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss.BlacklistBackend)
  GOOGLE_DCHECK_NE(&from, this);
  const BlacklistBackend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlacklistBackend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss.BlacklistBackend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss.BlacklistBackend)
    MergeFrom(*source);
  }
}

void BlacklistBackend::MergeFrom(const BlacklistBackend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss.BlacklistBackend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.upstream_name().size() > 0) {

    upstream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_name_);
  }
  if (from.label() != 0) {
    set_label(from.label());
  }
  if (from.redirect_max() != 0) {
    set_redirect_max(from.redirect_max());
  }
  if (from.retry_max() != 0) {
    set_retry_max(from.retry_max());
  }
}

void BlacklistBackend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss.BlacklistBackend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlacklistBackend::CopyFrom(const BlacklistBackend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss.BlacklistBackend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlacklistBackend::IsInitialized() const {
  return true;
}

void BlacklistBackend::Swap(BlacklistBackend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlacklistBackend::InternalSwap(BlacklistBackend* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  upstream_name_.Swap(&other->upstream_name_);
  swap(label_, other->label_);
  swap(redirect_max_, other->redirect_max_);
  swap(retry_max_, other->retry_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlacklistBackend::GetMetadata() const {
  protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerConfig::InitAsDefaultInstance() {
  ::ss::_ServerConfig_default_instance_._instance.get_mutable()->cache_ = const_cast< ::ss::Backend*>(
      ::ss::Backend::internal_default_instance());
  ::ss::_ServerConfig_default_instance_._instance.get_mutable()->hint_ = const_cast< ::ss::HintBackend*>(
      ::ss::HintBackend::internal_default_instance());
  ::ss::_ServerConfig_default_instance_._instance.get_mutable()->blacklist_ = const_cast< ::ss::BlacklistBackend*>(
      ::ss::BlacklistBackend::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kPortFieldNumber;
const int ServerConfig::kThreadNumFieldNumber;
const int ServerConfig::kCacheFieldNumber;
const int ServerConfig::kHintFieldNumber;
const int ServerConfig::kBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_server_5fconfig_2eproto::InitDefaultsServerConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ss.ServerConfig)
}
ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cache()) {
    cache_ = new ::ss::Backend(*from.cache_);
  } else {
    cache_ = NULL;
  }
  if (from.has_hint()) {
    hint_ = new ::ss::HintBackend(*from.hint_);
  } else {
    hint_ = NULL;
  }
  if (from.has_blacklist()) {
    blacklist_ = new ::ss::BlacklistBackend(*from.blacklist_);
  } else {
    blacklist_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_num_) -
    reinterpret_cast<char*>(&port_)) + sizeof(thread_num_));
  // @@protoc_insertion_point(copy_constructor:ss.ServerConfig)
}

void ServerConfig::SharedCtor() {
  ::memset(&cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_num_) -
      reinterpret_cast<char*>(&cache_)) + sizeof(thread_num_));
  _cached_size_ = 0;
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:ss.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete cache_;
  if (this != internal_default_instance()) delete hint_;
  if (this != internal_default_instance()) delete blacklist_;
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  ::protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerConfig& ServerConfig::default_instance() {
  ::protobuf_server_5fconfig_2eproto::InitDefaultsServerConfig();
  return *internal_default_instance();
}

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ss.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cache_ != NULL) {
    delete cache_;
  }
  cache_ = NULL;
  if (GetArenaNoVirtual() == NULL && hint_ != NULL) {
    delete hint_;
  }
  hint_ = NULL;
  if (GetArenaNoVirtual() == NULL && blacklist_ != NULL) {
    delete blacklist_;
  }
  blacklist_ = NULL;
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_num_) -
      reinterpret_cast<char*>(&port_)) + sizeof(thread_num_));
  _internal_metadata_.Clear();
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ss.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thread_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ss.Backend cache = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ss.HintBackend hint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ss.BlacklistBackend blacklist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ss.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ss.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ss.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // int32 thread_num = 2;
  if (this->thread_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thread_num(), output);
  }

  // .ss.Backend cache = 3;
  if (this->has_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cache_, output);
  }

  // .ss.HintBackend hint = 4;
  if (this->has_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hint_, output);
  }

  // .ss.BlacklistBackend blacklist = 5;
  if (this->has_blacklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->blacklist_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ss.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ss.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // int32 thread_num = 2;
  if (this->thread_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thread_num(), target);
  }

  // .ss.Backend cache = 3;
  if (this->has_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->cache_, deterministic, target);
  }

  // .ss.HintBackend hint = 4;
  if (this->has_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->hint_, deterministic, target);
  }

  // .ss.BlacklistBackend blacklist = 5;
  if (this->has_blacklist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->blacklist_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss.ServerConfig)
  return target;
}

size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss.ServerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ss.Backend cache = 3;
  if (this->has_cache()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cache_);
  }

  // .ss.HintBackend hint = 4;
  if (this->has_hint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hint_);
  }

  // .ss.BlacklistBackend blacklist = 5;
  if (this->has_blacklist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->blacklist_);
  }

  // int32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 thread_num = 2;
  if (this->thread_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cache()) {
    mutable_cache()->::ss::Backend::MergeFrom(from.cache());
  }
  if (from.has_hint()) {
    mutable_hint()->::ss::HintBackend::MergeFrom(from.hint());
  }
  if (from.has_blacklist()) {
    mutable_blacklist()->::ss::BlacklistBackend::MergeFrom(from.blacklist());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.thread_num() != 0) {
    set_thread_num(from.thread_num());
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  using std::swap;
  swap(cache_, other->cache_);
  swap(hint_, other->hint_);
  swap(blacklist_, other->blacklist_);
  swap(port_, other->port_);
  swap(thread_num_, other->thread_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_server_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ss

// @@protoc_insertion_point(global_scope)
